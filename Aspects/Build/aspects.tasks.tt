<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".targets" #>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
<#  
 string projectDir = Host.ResolveAssemblyReference("$(ProjectDir)");
 string assembly = Host.ResolveAssemblyReference("$(TargetFileName)");

 foreach (var path in System.IO.Directory.GetFiles(System.IO.Path.Combine(projectDir, "tasks"),"*.cs", System.IO.SearchOption.AllDirectories))
 {
     string relativePath = path.Substring(projectDir.Length);
     string data = System.IO.File.ReadAllText(path);

 if (!relativePath.EndsWith(".inline.cs", StringComparison.OrdinalIgnoreCase))
 {
     var sections = Regex.Match(data, @"^((?:using [^;]+;\s*)+)\s*(?:public|internal|private)?\s*class (\w+)\s*:\s*I?Task\b", RegexOptions.Singleline);
	 var name = sections.Groups[2].Value;
	 if (!string.IsNullOrWhiteSpace(name))
	 {
#>
  <!-- <#= relativePath #> -->
  <UsingTask TaskName="<#= name #>" AssemblyFile="<#= assembly #>" />
<#
   }
 }
 else
 {
     var sections = Regex.Match(data, @"^((?:using [^;]+;\s*)+)?\s*class (\w+)\s*{\s*(.+?)(?:public|internal|private)?\s*\w+\s*\(([^)]+)?\)\s*{(.+)}\s*}\s*$", RegexOptions.Singleline);
	 var name = sections.Groups[2].Value;
     var usings = from Match match in Regex.Matches(sections.Groups[1].Value, @"using ([^;]+);") select match.Groups[1].Value;
     var outputs = from Match match in Regex.Matches(sections.Groups[3].Value, @"(\S+) ([^;]+);") select new { Key = match.Groups[2].Value, Value = match.Groups[1].Value };
     var inputs =  from Match match in Regex.Matches(sections.Groups[4].Value, @"(\S+) ([^;]+)(?:,|$)") select new { Key = match.Groups[2].Value, Value = match.Groups[1].Value };
     var body = sections.Groups[5].Value; 
#>
  <!-- <#= relativePath #> -->
  <UsingTask TaskName="<#= name #>" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
<# foreach (var o in inputs)
{#>
      <<#= o.Key #> ParameterType="<#= o.Value #>" Required="true" />
<#} #>
<# foreach (var o in outputs)
{#>
      <<#= o.Key #> ParameterType="<#= o.Value #>" Output="true" />
<#} #>
    </ParameterGroup>
    <Task>
<# foreach (var u in usings)
{#>
      <Using Namespace="<#= u #>"/>
<#} #>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
<#= body #>
        ]]>
      </Code>
    </Task>
  </UsingTask>
<#} }#>
</Project>